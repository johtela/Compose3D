<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+ void Vec(int dim, string type, string suffix) { 
	
	var vecType = "Vec" + dim + suffix;
#>
namespace Compose3D.Arithmetics
{
    using System;
    using System.Text;
	using GLTypes;

	[GLType ("<#= suffix #>vec<#= dim #>")]
    public struct <#= vecType #> : IVec<<#= vecType #>, <#= type #>>
    { 
<#+		ComponentFields (dim, type);
		BasicConstructor (dim, type, suffix);
		SingleValueConstructor (dim, type, suffix);
		for (int i = 2; i <= 4; i++)
			CopyConstructor (dim, type, suffix, i); #>
		[GLUnaryOperator ("-{0}")]
<#+		Unary (dim, vecType, "Negate", "-", ", "); #>
		[GLBinaryOperator ("{0} + {1}")]
<#+		Binary (dim, vecType, "Add", "+", ", "); #>
		[GLBinaryOperator ("{0} - {1}")]
<#+		Binary (dim, vecType, "Subtract", "-", ", "); #>
		[GLBinaryOperator ("{0} * {1}")]
<#+		Binary (dim, vecType, "Multiply", "*", ", "); #>
		[GLBinaryOperator ("{0} * {1}")]
<#+		Scalar (dim, vecType, type, "Multiply", "*", ", "); #>
		[GLBinaryOperator ("{0} / {1}")]
<#+		Scalar (dim, vecType, type, "Divide", "/", ", "); #>
		[GLFunction ("dot ({0})")]
<#+ 	BinaryScalar (dim, vecType, type, "Dot", "*", " + ");#>
		[GLFunction ("clamp ({0})")]
<#+		Scalar2 (dim, vecType, type, "Clamp", "{0}.Clamp ({1}, {2})", "min", "max", ", ");
		BinaryScalar (dim, vecType, "bool", "Equals", "==", " && ");
		Indexer(dim, type); 
	    for (int i = dim; i > 1; i--)
			Swizzler(i, type, suffix);
#>
		public <#= type #> LengthSquared
		{
			get { return <#= ComponentList(dim, " + ", comp => string.Format("{0} * {0}", comp)) #>; }
		}

		[GLFunction ("length ({0})")]
		public <#= type #> Length
		{
			get { return (<#= type #>)Math.Sqrt (LengthSquared); }
		}

		[GLFunction ("normalize ({0})")]
		public <#= vecType #> Normalized
		{
			get { return Divide (Length); }
		}

		public override bool Equals (object obj)
		{
            return obj is <#= vecType #> && Equals ((<#= vecType #>)obj);
		}

        public override int GetHashCode ()
        {
			return <#= ComponentList(dim, " ^ ", comp => comp + ".GetHashCode ()") #>;
        }

        public override string ToString ()
        {
            var sb = new StringBuilder ("[");
            for (int i = 0; i < <#= dim #>; i++)
                sb.AppendFormat (" {0}", this[i].ToString ());
            sb.Append (" ]");
            return sb.ToString ();
        }

		[GLUnaryOperator ("-{0}")]
        public static <#= vecType #> operator - (<#= vecType #> vec)
        {
            return vec.Negate ();
        }

		[GLBinaryOperator ("{0} - {1}")]
        public static <#= vecType #> operator - (<#= vecType #> left, <#= vecType #> right)
        {
            return left.Subtract (right);
        }

		[GLBinaryOperator ("{0} * {1}")]
        public static <#= vecType #> operator * (<#= type #> scalar, <#= vecType #> vec)
        {
            return vec.Multiply (scalar);
        }

		[GLBinaryOperator ("{0} * {1}")]
        public static <#= vecType #> operator * (<#= vecType #> vec, <#= type #> scalar)
        {
            return vec.Multiply (scalar);
        }

		[GLBinaryOperator ("{0} * {1}")]
        public static <#= vecType #> operator * (<#= vecType #> vec, <#= vecType #> scale)
        {
            return vec.Multiply (scale);
        }

		[GLBinaryOperator ("{0} / {1}")]
        public static <#= vecType #> operator / (<#= vecType #> vec, <#= type #> scalar)
        {
            return vec.Divide (scalar);
        }

		[GLBinaryOperator ("{0} + {1}")]
        public static <#= vecType #> operator + (<#= vecType #> left, <#= vecType #> right)
        {
            return left.Add (right);
        }

		[GLBinaryOperator ("{0} == {1}")]
        public static bool operator == (<#= vecType #> left, <#= vecType #> right)
        {
            return left.Equals (right);
        }

		[GLBinaryOperator ("{0} != {1}")]
        public static bool operator != (<#= vecType #> left, <#= vecType #> right)
        {
            return !left.Equals (right);
        }
    }
} <#+ 
} 

string Component(int i) {
    switch (i)
    {
        case 0 : return "X";
        case 1 : return "Y";
        case 2 : return "Z";
        case 3 : return "W";
        default : throw new ArgumentOutOfRangeException("i");
    }
}

IEnumerable<string> Components(int dim) {
	return from i in Enumerable.Range(0, dim)
		   select Component(i);
}

string ComponentList(int dim, string delimiter, Func<string, string> map) {
	return Components(dim).Select(map).Aggregate((s1, s2) => s1 + delimiter + s2);
}

string ArgumentList(int dim, string type) {
	return ComponentList(dim, ", ", comp => type + " " + comp.ToLower());
}

string PartialArgumentList(int start, int dim, string type) {
	return Components(dim).Skip(start).Select(comp => type + " " + comp.ToLower())
		.Aggregate((s1, s2) => s1 + ", " + s2);
}

void ComponentStatements(int dim, Func<string, string> map) {
	foreach (var comp in Components(dim)) {  
#><#= map(comp) #>; 
<#+ }
}

void ComponentFields(int dim, string type) { 
	foreach (var comp in Components(dim)) {  
#>		public <#= type #> <#= comp #>; 
<#+ }
	WriteLine("");
}
 
void BasicConstructor(int dim, string type, string suffix) { #>
		[GLConstructor ("<#= suffix #>vec<#= dim #> ({0})")]
		public Vec<#= dim #><#= suffix #> (<#= ArgumentList(dim, type) #>)
		{	
<#+	ComponentStatements(dim, s => string.Format("			{0} = {1}", s, s.ToLower())); #>
		}

 <#+ }

void SingleValueConstructor(int dim, string type, string suffix) { #>
		[GLConstructor ("<#= suffix #>vec<#= dim #> ({0})")]
		public Vec<#= dim #><#= suffix #> (<#= type #> value)
		{	
<#+ ComponentStatements(dim, s => string.Format("			{0} = value", s)); #>
		}

 <#+ }
 
void CopyConstructor(int dim, string type, string suffix, int otherDim) { 
	if (dim > otherDim) { #>
		[GLConstructor ("<#= suffix #>vec<#= dim #> ({0})")]
		public Vec<#= dim #><#= suffix #> (Vec<#= otherDim #><#= suffix #> vec, <#= PartialArgumentList(otherDim, dim, type) #>)
		{	
<#+ }
	else { #>
		[GLConstructor ("<#= suffix #>vec<#= dim #> ({0})")]
		public Vec<#= dim #><#= suffix #> (Vec<#= otherDim #><#= suffix #> vec)
		{	
<#+ 
    }
	var currDim = 0;
	ComponentStatements(dim, s => 
		++currDim <= otherDim ?
			 string.Format("			{0} = vec.{0}", s) : 
			 string.Format("			{0} = {1}", s, s.ToLower())); #>
		}

 <#+ } 

void Indexer(int dim, string type) { #>
		public int Dimensions
		{
			get { return <#= dim #>; }
		}

		public <#= type #> this[int index]
		{
			get
			{
				switch (index)
				{	<#+ foreach (int i in Enumerable.Range(0, dim)) { #>         
					case <#= i.ToString() #>: return <#= Component(i) #>; <#+ } #>

			        default: throw new ArgumentOutOfRangeException("index");
				}
			} 
			set
			{
				switch (index)
				{	<#+ foreach (int i in Enumerable.Range(0, dim)) { #>         
					case <#= i.ToString() #>: <#= Component(i) #> = value; break; <#+ } #>

			        default: throw new ArgumentOutOfRangeException("index");
				}
			} 
		}
					
<#+ } 

void Swizzler(int dim, string type, string suffix) { 
	var vecType = "Vec" + dim.ToString() + suffix;
#>
		public <#= vecType #> this[<#= ArgumentList(dim, "Coord") #>]
		{
			get { return new <#= vecType #> (<#= ComponentList(dim, ", ", s => string.Format("this[(int){0}]", s.ToLower())) #>); }
			set
			{
<#+ ComponentStatements(dim, s => string.Format("				this[(int){0}] = value.{1}", s.ToLower(), s)); #>
			}
		}

<#+ } 

void Unary(int dim, string vecType, string name, string oper, string delim) { #>
		public <#= vecType #> <#= name #> ()
		{
			return new <#= vecType #> (<#= ComponentList(dim, delim, comp => string.Format("{0}{1}", oper, comp)) #>);
		}

<#+ } 

void Binary(int dim, string vecType, string name, string oper, string delim) { #>
		public <#= vecType #> <#= name #> (<#= vecType #> other)
		{
			return new <#= vecType #> (<#= ComponentList(dim, delim, comp => string.Format("{0} {1} other.{0}", comp, oper)) #>);
		}

<#+ } 

void Scalar(int dim, string vecType, string scalarType, string name, string oper, string delim) { #>
		public <#= vecType #> <#= name #> (<#= scalarType #> scalar)
		{
			return new <#= vecType #> (<#= ComponentList(dim, delim, comp => string.Format("{0} {1} scalar", comp, oper)) #>);
		}

<#+ } 

void Scalar2(int dim, string vecType, string scalarType, string name, string format, string arg1, string arg2, string delim) { #>
		public <#= vecType #> <#= name #> (<#= scalarType #> <#= arg1 #>, <#= scalarType #> <#= arg2 #>)
		{
			return new <#= vecType #> (<#= ComponentList(dim, delim, comp => string.Format(format, comp, arg1, arg2)) #>);
		}

<#+ } 

void BinaryScalar(int dim, string vecType, string scalarType, string name, string oper, string delim) { #>
		public <#= scalarType #> <#= name #> (<#= vecType #> other)
		{
			return <#= ComponentList(dim, delim, comp => string.Format("{0} {1} other.{0}", comp, oper)) #>;
		}

<#+ } 

#>